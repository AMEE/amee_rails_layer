The rails abstraction layer gem provides a series of common abstractions that are typically used when
creating rails models that store carbon data in AMEE.  This is an opinionated gem and whilst it will 
suit a lot of projects well it will not be right for every project.  In those cases use the lower level 
amee-ruby gem (http://github.com/floppy/amee-ruby).

== Installation

Command line installation:

  sudo gem install amee_rails_layer

== Configuration

For models that store carbon data in AMEE, several additional fields required in the database.  Normally
these would be:
  * name (string) - a name for the object, often set by user but can be assigned automatically
  * amee_profile_item_id (string) - the AMEE profile Item ID used to store the carbon data
  * carbon_output_cache (float) - the amount of carbon produced
  * units (string) - the units the amount field is in
  * amount (float) - the amount of the thing being recorded, eg 6 (kg), 9 (litres)
but extra fields may be required depending on the options used.  See AmeeCarbonStore for full details

== Usage

Currently the gem assumes that the rails application has a structure where a Project model has has_many
associations with models that wish to store carbon data in AMEE.  This is a hangover from the application
this gem was originally extracted from and will ultimately be removed.  In the meantime a Project model
is required that has the has_amee_profile declaration made available by the amee-ruby gem.  The models
that wish to store their data in AMEE should belong_to the Project model and will use it's AMEE profile
to store data under.

The models that are to store carbon data in AMEE need the has_carbon_data_stored_in_amee declaration with
any appropriate options and must implement the amee_category method.  For this, there are two main
options:

1) If the model is always the same type just return a AmeeCategory with relevant options for where the
data should be stored in AMEE
2) If the model has multiple types, for example a Journey that can be a Car, Bus Journey etc, a pattern
like the following can be used:
   
   class Journey < ActiveRecord::Base
     TYPE = {
       :bus => AmeeCategory.new("Bus", :journey_distance, "/transport/bus/generic/defra", :type => "typical"),
       :car => AmeeCategory.new("Car", :distance, "/transport/car/generic/defra/bysize", :fuel => "average", :size => "average"),
       ...
     }

     def amee_category
       TYPE[journey_type.to_sym]
     end
   end
     
Note the need for a column called journey_type in the database to store the type of the Journey.

The database caches the carbon value returned by AMEE to keep the local application fast when
displaying this data.  As a result of this a cronjob should be run at a regular interval to update
the carbon value.  This is because AMEE alters the underlying calculations as more accurate data 
and formulas becomes available.  See AmeeCarbonStore#update_carbon_caches for more details.

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a future version unintentionally.
* Commit, do not mess with rakefile, version, or history (if you want to have your own version, that is fine 
  but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== TODO
* Remove need for Project model with associations to models that store carbon data.  The project
  association should become an option on has_carbon_data_stored_in_amee which will allow it to be
  named as any class.  The project references in AmeeCarbonStore have been pulled into methods so
  it should be easy to make these points conditional depending on whether user has configured for
  usage with project or not.  If they configure without project we should auto-inject the 
  has_amee_profile decleration.  Update doc for configuration section in README (as DB will 
  require extra fields), Usage section in README (as no longer compulsory) and the method
  has_carbon_data_stored_in_amee doc.
* Full test coverage

== Copyright

Copyright (c) 2010 AMEE UK ltd. See LICENSE for details.


TODO:
- amee_profile_path method should remove need for Profile#profile_path method - test and remove from template projects
- sort license and add license file
- opensource_fix branch can be removed
- Push changes to nesta and open source branches.  Has nesta branch still got lib files there?  This got really confused at one point - must test name_is_unique_given_date_range method as made change there - create a 'Diesel' row and then check doesn't allow to create again in same project, but does in a new one
- Nesta and OS app deploy on app store (servers will need the gem first)